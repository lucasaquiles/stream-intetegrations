buildscript{

    repositories{
        jcenter()
    }

    dependencies{
        classpath "com.commercehub.gradle.plugin:gradle-avro-plugin:0.14.2"
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.3.72"
    id "org.jetbrains.kotlin.kapt" version "1.3.72"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.3.72"
    id "com.github.johnrengelman.shadow" version "6.0.0"
    id "application"
}

apply plugin: "com.commercehub.gradle.plugin.avro"

version "0.1"
group "dev4fun.stream"

repositories {
    mavenCentral()
    jcenter()
    maven {
        url "http://packages.confluent.io/maven/"
    }
}

configurations {
    // for dependencies that are needed for development only
    generateConfig
    developmentOnly
}

dependencies {
    generateConfig 'info.picocli:picocli-codegen:4.2.0'
    kapt(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    kapt("io.micronaut:micronaut-inject-java")
    kapt("io.micronaut:micronaut-validation")
    kapt("info.picocli:picocli-codegen:4.2.0")
    implementation(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    implementation("io.micronaut:micronaut-inject")
    implementation("io.micronaut:micronaut-validation")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    implementation("io.micronaut.kotlin:micronaut-kotlin-runtime")
    implementation("io.micronaut:micronaut-runtime")
    implementation("info.picocli:picocli")
    implementation("io.micronaut.picocli:micronaut-picocli")

    implementation 'io.confluent:kafka-avro-serializer:5.4.0'
    implementation 'io.confluent:kafka-json-serializer:5.4.0'
    implementation 'io.confluent:kafka-json-serializer:5.4.0'

    implementation("io.micronaut.kafka:micronaut-kafka")
    developmentOnly("io.micronaut:micronaut-runtime-osx:$micronautVersion")
    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("com.fasterxml.jackson.module:jackson-module-kotlin")
    kaptTest(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    kaptTest("io.micronaut:micronaut-inject-java")
    testImplementation(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("io.micronaut.test:micronaut-test-junit5")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
}

test.classpath += configurations.developmentOnly

mainClassName = "dev4fun.stream.ProducerCommand"

// use JUnit 5 platform
test {
    useJUnitPlatform()
}

java {
    sourceCompatibility = JavaVersion.toVersion('1.8')
}

allOpen {
    annotation("io.micronaut.aop.Around")
}
compileKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        //Will retain parameter names for Java reflection
        javaParameters = true
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        javaParameters = true
    }
}
kapt {
    arguments {
        arg("micronaut.processing.incremental", true)
        arg("micronaut.processing.annotations", "dev4fun.stream.*")
        arg("micronaut.processing.group", "dev4fun.stream")
        arg("micronaut.processing.module", "producer")
    }
}

shadowJar {
    mergeServiceFiles()
}

tasks.withType(JavaExec) {
    classpath += configurations.developmentOnly
    jvmArgs('-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
    if (gradle.startParameter.continuous) {
        systemProperties(
            'micronaut.io.watch.restart':'true',
            'micronaut.io.watch.enabled':'true',
            "micronaut.io.watch.paths":"src/main"
        )
    }
}

task generateAvro(type: com.commercehub.gradle.plugin.avro.GenerateAvroJavaTask) {
    source("$rootDir/src/main/avro")
    outputDir = file("build/generated-main-avro-java")
}

sourceSets.main.java.srcDir 'build/generated-main-avro-java'


task(generateGraalReflectionConfig, dependsOn: 'classes', type: JavaExec) {
    main = 'picocli.codegen.aot.graalvm.ReflectionConfigGenerator'
    classpath = configurations.generateConfig + sourceSets.main.runtimeClasspath
    def outputFile = "${buildDir}/resources/main/META-INF/native-image/${project.group}/${project.name}/reflect-config.json"
    args = ["--output=$outputFile",
            'dev4fun.stream.command',
            'dev4fun.stream.Player',
            'dev4fun.stream.RatingCreated',
            'dev4fun.stream.SongCreated']
}
assemble.dependsOn generateGraalReflectionConfig
